# Importing libraries
import matplotlib.pyplot as plt
import numpy as np
from statistics import median, mean
from unco import UNCO_PATH
from pathlib import Path

def _get_color_linestyle_of_model(model_numb):
    color = "r"
    linestyle = "-"
    match model_numb:
        case 1:
            color = "r"
            linestyle = "-"
        case 2:
            color = "g"
            linestyle = "-"
        case 3:
            color = "b"
            linestyle = "-"
        case 4:
            color = "y"
            linestyle = "-"
        case 5:
            color = "m"
            linestyle = "-"
        case 6:
            color = "c"
            linestyle = "-"
        case 7:
            color = "k"
            linestyle = "-"
        case 8:
            color = "r"
            linestyle = ":"
        case 9:
            color = "g"
            linestyle = ":"
        case 10:
            color = "b"
            linestyle = ":"
    return color, linestyle


def _plot_results_increasing_alternatives(X : range, results : list[list[list[float]]], querylist : list[int], modellist : list[int], increasing_alternatives : bool):
    output = [[[] for _ in modellist] for _ in querylist]
    for res in results:
        for query_numb, query_res in enumerate(res):
            for model_numb, model_res in enumerate(query_res):
                output[query_numb][model_numb].append(model_res)

    print(output)
    
    for index, query_numb in enumerate(querylist):
        fig = plt.figure()
        for modelindex, model_numb in enumerate(modellist):
            color, linestyle = _get_color_linestyle_of_model(model_numb)
            if model_numb == 9: model_numb = "9a"
            model_numb = "9b" if model_numb == 10 else str(model_numb)
            plt.plot(X, output[index][modelindex], color=color, linestyle=linestyle, label=str(model_numb))

        if increasing_alternatives: plt.xlabel("#Alternatives per uncertain statement")
        else: plt.xlabel("#Uncertainties per column")

        plt.ylabel("Time in seconds")
        if increasing_alternatives: plt.title(f"Query {query_numb} with increasing numb alternatives")
        else: plt.title(f"Query {query_numb} with increasing numb uncertainties")

        plt.legend()

        #plt.ylim([0.3, 0.45])

        if increasing_alternatives: plt.savefig(Path(UNCO_PATH,f"src/benchmark/results/alternatives{query_numb}.pdf"), format="pdf", bbox_inches="tight")
        else: plt.savefig(Path(UNCO_PATH,f"src/benchmark/results/uncertainties{query_numb}.pdf"), format="pdf", bbox_inches="tight")

        plt.close(fig)
            # plt.show()
# Using Numpy to create an array X

  
# <180
res1 = [[[0.06308579444885254, 0.05965077877044678, 0.05793933073679606, 0.05632479985555013, 0.057222882906595864, 0.0709614356358846, 0.059170285860697426, 0.069367249806722, 0.06429004669189453, 0.0709298849105835], [0.015218695004781088, 0.015095154444376627, 0.015477935473124186, 0.01519028345743815, 0.03675619761149088, 0.014901399612426758, 0.014701406160990397, 0.014877716700236002, 0.014896035194396973, 0.014615098635355631], [0.05876636505126953, 0.057190259297688804, 0.057198802630106606, 0.05616601308186849, 0.061893065770467125, 0.056263486544291176, 0.059134999910990395, 0.05527174472808838, 0.061030308405558266, 0.05385728677113851], [0.2750674883524577, 0.2729685306549072, 0.27498459815979004, 0.27163724104563397, 0.27215619881947833, 0.27394092082977295, 0.2731691201527913, 0.27155903975168866, 0.2716211477915446, 0.27543361981709796], [0.009905139605204264, 0.014068404833475748, 0.009733875592549643, 0.011176029841105143, 0.012531439463297525, 0.012670358022054037, 0.01264492670694987, 0.012455264727274576, 0.010477463404337565, 0.010502854983011881], [0, 0, 0.3281588554382324, 0.33385705947875977, 0.3339592218399048, 0, 0, 0, 0, 0.32627348105112713]], [[0.08540225028991699, 0.08108743031819661, 0.09279481569925944, 0.11899383862813313, 0.08898087342580159, 0.08825210730234782, 0.08073767026265462, 0.066154678662618, 0.05613235632578532, 0.0556641419728597], [0.04044187068939209, 0.04093452294667562, 0.041605750719706215, 0.04751098155975342, 0.03571311632792155, 0.04153788089752197, 0.04696722825368246, 0.03451315561930338, 0.019562800725301106, 0.02212647596995036], [0.08191712697347005, 0.07216803232828777, 0.0817185640335083, 0.10153516133626302, 0.07533045609792073, 0.08812916278839111, 0.07585986455281575, 0.06696867942810059, 0.05607382456461588, 0.05911592642466227], [0.33607856432596844, 0.2952706416447957, 0.4385283390680949, 0.3623270591100057, 0.4105043013890584, 0.32881959279378253, 0.29402923583984375, 0.29643547534942627, 0.27165651321411133, 0.27476751804351807], [0.051139235496520996, 0.0423515240351359, 0.06624996662139893, 0.0635066032409668, 0.09103500843048096, 0.04518433411916097, 0.04430830478668213, 0.036287943522135414, 0.030194679896036785, 0.031179149945576985], [0, 0, 0.5337393681208292, 0.4343593120574951, 0.5984569787979126, 0, 0, 0, 0, 0.3459423780441284]], [[0.096457839012146, 0.08686105410257976, 0.11691073576609294, 0.12326860427856445, 0.09294005235036214, 0.08981609344482422, 0.09467649459838867, 0.06680381298065186, 0.056635499000549316, 0.04950896898905436], [0.043304125467936196, 0.04093615214029948, 0.045447746912638344, 0.07198774814605713, 0.03918226559956869, 0.04801583290100098, 0.05490191777547201, 0.047195831934611, 0.024825056393941242, 0.02569623788197835], [0.0868977705637614, 0.07773701349894206, 0.09380857149759929, 0.1482857863108317, 0.0901021957397461, 0.07754584153493245, 0.08266325791676839, 0.06670590241750081, 0.0581592321395874, 0.05959932009379069], [0.38793758551279706, 0.3012125889460246, 0.564428965250651, 0.4273565212885539, 0.5201181173324585, 0.3647558291753133, 0.2987521489461263, 0.301681121190389, 0.2528676191965739, 0.2589978377024333], [0.08666106065114339, 0.0708316167195638, 0.11543444792429607, 0.10798398653666179, 0.16109081109364828, 0.08043317000071208, 0.07128806908925374, 0.061826467514038086, 0.044062296549479164, 0.04516760508219401], [0, 0, 0.6902527411778768, 0.5260691245396932, 0.8390719493230184, 0, 0, 0, 0, 0.33471882343292236]], [[0.10140744845072429, 0.10284066200256348, 0.12845385074615479, 0.14370286464691162, 0.10409943262736003, 0.1034009059270223, 0.09948229789733887, 0.076927383740743, 0.053881446520487465, 0.04976137479146322], [0.057224790255228676, 0.061567465464274086, 0.058474342028299965, 0.09059357643127441, 0.04084082444508871, 0.051048994064331055, 0.0561525026957194, 0.05265859762827555, 0.031861305236816406, 0.03177452087402344], [0.08389135201772054, 0.09410333633422852, 0.10713394482930501, 0.1907956600189209, 0.08757225672403972, 0.08428064982096355, 0.08969958623250325, 0.0733174482981364, 0.05837098757425944, 0.06348220507303874], [0.4309579133987427, 0.3056107759475708, 0.6818647384643555, 0.4852441151936849, 0.6464200417200724, 0.4049294789632161, 0.3014530340830485, 0.2992543379465739, 0.24050347010294595, 0.24578956762949625], [0.12242881457010905, 0.09965948263804118, 0.1634292999903361, 0.1515879233678182, 0.23983140786488852, 0.11131580670674641, 0.09737579027811687, 0.08146333694458008, 0.05605157216389974, 0.06278204917907715], [0, 0, 0.840035080909729, 0.6020918687184652, 1.092907428741455, 0, 0, 0, 0, 0.33312034606933594]], [[0.1149429480234782, 0.10102224349975586, 0.16675694783528647, 0.14475695292154947, 0.13005030155181885, 0.113473375638326, 0.10263232390085857, 0.07804890473683675, 0.04519915580749512, 0.04656787713368734], [0.06242561340332031, 0.06606745719909668, 0.06745409965515137, 0.1170281171798706, 0.047112743059794106, 0.06823523839314778, 0.06170121828715006, 0.06563802560170491, 0.0334012508392334, 0.0344319740931193], [0.09141298135121663, 0.10167876879374187, 0.13579054673512778, 0.22893615563710532, 0.09012166659037273, 0.08769766489664714, 0.10708439350128174, 0.07908431688944499, 0.05735274155934652, 0.06405886014302571], [0.468090017636617, 0.3097967704137166, 0.7944823900858561, 0.5580360094706217, 0.7758132219314575, 0.4321943124135335, 0.310705304145813, 0.29237814744313556, 0.23143593470255533, 0.2364574670791626], [0.15992077191670737, 0.1262415647506714, 0.21508165200551352, 0.20326101779937744, 0.3115696907043457, 0.14448090394337973, 0.12418123086293538, 0.10337698459625244, 0.07271985212961833, 0.0777810017267863], [0, 0, 1.0065642595291138, 0.6844828526178995, 1.3273832003275554, 0, 0, 0, 0, 0.3312292496363322]]]
# >180
res2 = [[[0.07314292589823405, 0.09084916114807129, 0.07660722732543945, 0.1111923058827718, 0.07631631692250569, 0.06145326296488444, 0.0801073710123698, 0.06054492791493734, 0.056548357009887695, 0.0599367618560791], [0.019482930501302082, 0.0322944720586141, 0.02322554588317871, 0.04743905862172445, 0.036101698875427246, 0.019768953323364258, 0.034751574198404946, 0.018955190976460774, 0.016982436180114746, 0.019039154052734375], [0.06492618719736735, 0.0742257038752238, 0.06507003307342529, 0.08289611339569092, 0.07196633021036784, 0.06676316261291504, 0.07313974698384602, 0.06183119614919027, 0.05436241626739502, 0.05749615033467611], [0.34114527702331543, 0.3008344570795695, 0.4080899953842163, 0.3426539897918701, 0.3861958583196004, 0.3339012066523234, 0.30310992399851483, 0.3025081157684326, 0.29253772894541424, 0.2892147699991862], [0.03996594746907552, 0.03184537092844645, 0.05116462707519531, 0.04470419883728027, 0.06480785210927327, 0.03831291198730469, 0.03459000587463379, 0.024774829546610515, 0.02234625816345215, 0.02407522996266683], [0, 0, 0.49589558442433673, 0.40175966421763104, 0.5126237869262695, 0, 0, 0, 0, 0.35450315475463867]], [[0.07139925161997478, 0.08343974749247234, 0.08033327261606853, 0.09444944063822429, 0.08309451738993327, 0.07394854227701823, 0.08358724912007649, 0.058016300201416016, 0.05822976430257162, 0.06084907054901123], [0.019959410031636555, 0.0318455696105957, 0.021476229031880695, 0.037689765294392906, 0.03304715951283773, 0.019539276758829754, 0.03826280434926351, 0.018795331319173176, 0.01796225706736247, 0.01908564567565918], [0.06544991334279378, 0.06473938624064128, 0.06575194994608562, 0.08572928110758464, 0.06919952233632405, 0.06607500712076823, 0.07067978382110596, 0.06484345595041911, 0.05226306120554606, 0.05591535568237305], [0.3427191575368245, 0.30609432856241864, 0.41430219014485675, 0.3508710463841756, 0.3974584738413493, 0.33530473709106445, 0.30344823996225995, 0.30467116832733154, 0.2914883295694987, 0.2865920066833496], [0.04199024041493734, 0.036250909169514976, 0.060511271158854164, 0.049028992652893066, 0.07068165143330891, 0.041801889737447105, 0.03581408659617106, 0.027054429054260254, 0.022600690523783367, 0.02483232816060384], [0, 0, 0.5029986699422201, 0.4108582337697347, 0.5306976636250814, 0, 0, 0, 0, 0.34632134437561035]], [[0.06973818937937419, 0.0824745496114095, 0.07525340716044109, 0.1053234338760376, 0.07949848969777425, 0.07402276992797852, 0.07463355859120686, 0.0722808043162028, 0.05830252170562744, 0.060312112172444664], [0.02126602331797282, 0.03651789824167887, 0.021577914555867512, 0.039794325828552246, 0.029912352561950684, 0.019425074259440105, 0.03848425547281901, 0.0188517967859904, 0.018011967341105144, 0.018762906392415363], [0.06419205665588379, 0.07024721304575603, 0.06706571578979492, 0.0885010560353597, 0.07059065500895183, 0.06516480445861816, 0.07742663224538167, 0.06739115715026855, 0.05727787812550863, 0.057308713595072426], [0.3506004412968953, 0.30634387334187824, 0.4313543240229289, 0.35452953974405926, 0.4071346918741862, 0.34169578552246094, 0.3027631839116414, 0.3009102741877238, 0.2925313711166382, 0.28917431831359863], [0.051908294359842934, 0.03944941361745199, 0.06005652745564779, 0.05486257870992025, 0.07640631993611653, 0.04239316781361898, 0.04032198588053385, 0.02435167630513509, 0.02428913116455078, 0.027821977933247883], [0, 0, 0.5115711688995361, 0.412592093149821, 0.5592406988143921, 0, 0, 0, 0, 0.3498348395029704]], [[0.07107353210449219, 0.07403886318206787, 0.07914102077484131, 0.09598799546559651, 0.08698304494222005, 0.07390030225118001, 0.08083359400431316, 0.05869126319885254, 0.060118913650512695, 0.05570622285207113], [0.02045174439748128, 0.0405357281366984, 0.022834022839864094, 0.03945771853129069, 0.03237243493398031, 0.01958016554514567, 0.03665435314178467, 0.018726547559102375, 0.018246690432230633, 0.019799073537190754], [0.06729523340861003, 0.07246565818786621, 0.06893173853556316, 0.09244998296101888, 0.07113440831502278, 0.06539034843444824, 0.0729680061340332, 0.06346348921457927, 0.054410060246785484, 0.06405806541442871], [0.34908556938171387, 0.306432048479716, 0.4487260977427165, 0.36411134401957196, 0.4234232505162557, 0.34808655579884845, 0.30977686246236164, 0.30052367846171063, 0.28867940107981366, 0.2909204165140788], [0.05295538902282715, 0.04063645998636881, 0.06412692864735921, 0.05955286820729574, 0.08519923686981201, 0.04843191305796305, 0.04029615720113119, 0.02898414929707845, 0.028197089831034344, 0.02890753746032715], [0, 0, 0.5282509724299113, 0.4170920451482137, 0.5765039523442587, 0, 0, 0, 0, 0.351129690806071]], [[0.06876885890960693, 0.0799475908279419, 0.07780675093332927, 0.09985085328420003, 0.09424527486165364, 0.07630578676859538, 0.0719439188639323, 0.06376143296559651, 0.06319395701090495, 0.05351436138153076], [0.019991556803385418, 0.04119042555491129, 0.022215604782104492, 0.040155609448750816, 0.0364386240641276, 0.01954948902130127, 0.04049205780029297, 0.0176848570505778, 0.018785754839579265, 0.018959959348042805], [0.0689237912495931, 0.07384149233500163, 0.06866896152496338, 0.09640292326609294, 0.07719699541727702, 0.06558767954508464, 0.07253762086232503, 0.0619653065999349, 0.05397613843282064, 0.059880336125691734], [0.36036845048268634, 0.31176380316416424, 0.462840994199117, 0.368843674659729, 0.43075493971506756, 0.3501203457514445, 0.3084125518798828, 0.30610020955403644, 0.2913610537846883, 0.2923250198364258], [0.05368387699127197, 0.04450786113739014, 0.06924720605214436, 0.06637473901112874, 0.0963279406229655, 0.05178757508595785, 0.04467336336771647, 0.03197073936462402, 0.02909223238627116, 0.030938585599263508], [0, 0, 0.5441588958104452, 0.4238120714823405, 0.6006576617558798, 0, 0, 0, 0, 0.3536653121312459]]]

#newres = [([median(l)] for l in sublist) for sublist in res]

print(_plot_results_increasing_alternatives(range(0,5000,1000),res1,querylist=[1,2,3,4,5,6],modellist=[1,2,3,4,5,6,7,8,9,10],increasing_alternatives=False))

# X = range(len(res[0][0]))[:10]

# results = res[0]

# plt.plot(X, results[0][:10], color='r', label='1')
# plt.plot(X, results[1][:10], color='b', label='2')
# plt.plot(X, results[2][:10], color='g', label='3')
# plt.plot(X, results[3][:10], color='y', label='4')
# plt.plot(X, results[4][:10], color='m', label='5')
# plt.plot(X, results[5][:10], color='c', label='6')
# plt.plot(X, results[6][:10], color='k', label='7')
# plt.plot(X, results[7][:10], color='y', label='8')

# plt.xlabel("#Uncertainties per column")
# plt.ylabel("Time")
# plt.title(f"Query {4} with increasing numb uncertainties")

# plt.legend()
# plt.show()

# print([l[:10] for l in results])
