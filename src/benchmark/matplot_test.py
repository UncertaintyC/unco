# Importing libraries
import matplotlib.pyplot as plt
import numpy as np
from statistics import median, mean
from unco import UNCO_PATH
from pathlib import Path

def _get_color_linestyle_of_model(model_numb):
    color = "r"
    linestyle = "-"
    match model_numb:
        case 1:
            color = "r"
            linestyle = "-"
        case 2:
            color = "g"
            linestyle = "-"
        case 3:
            color = "b"
            linestyle = "-"
        case 4:
            color = "y"
            linestyle = "-"
        case 5:
            color = "m"
            linestyle = "-"
        case 6:
            color = "c"
            linestyle = "-"
        case 7:
            color = "k"
            linestyle = "-"
        case 8:
            color = "r"
            linestyle = ":"
        case 9:
            color = "g"
            linestyle = ":"
        case 10:
            color = "b"
            linestyle = ":"
    return color, linestyle


def _plot_results_increasing_alternatives(X : range, results : list[list[list[float]]], querylist : list[int], modellist : list[int], increasing_alternatives : bool):
    output = [[[] for _ in modellist] for _ in querylist]
    for res in results:
        for query_numb, query_res in enumerate(res):
            for model_numb, model_res in enumerate(query_res):
                output[query_numb][model_numb].append(model_res)

    print(output)
    
    for index, query_numb in enumerate(querylist):
        fig = plt.figure()
        for modelindex, model_numb in enumerate(modellist):
            color, linestyle = _get_color_linestyle_of_model(model_numb)
            if model_numb == 9: model_numb = "9a"
            model_numb = "9b" if model_numb == 10 else str(model_numb)
            plt.plot(X, output[index][modelindex], color=color, linestyle=linestyle, label=str(model_numb))

        if increasing_alternatives: plt.xlabel("#Alternatives per uncertain statement")
        else: plt.xlabel("#Uncertainties per column")

        plt.ylabel("Time in seconds")
        if increasing_alternatives: plt.title(f"Query {query_numb} with increasing numb alternatives")
        else: plt.title(f"Query {query_numb} with increasing numb uncertainties")

        plt.legend()

        #plt.ylim([0.275, 0.345])

        if increasing_alternatives: plt.savefig(Path(UNCO_PATH,f"src/benchmark/results/alternatives{query_numb}.pdf"), format="pdf", bbox_inches="tight")
        else: plt.savefig(Path(UNCO_PATH,f"src/benchmark/results/uncertainties{query_numb}.pdf"), format="pdf", bbox_inches="tight")

        plt.close(fig)
            # plt.show()
# Using Numpy to create an array X


res = [[[0.05041971206665039, 0.055047130584716795, 0.05339169502258301, 0.05505590438842774, 0.05224428176879883, 0.04768109321594238, 0.054146337509155276, 0.05322113037109375, 0.04995737075805664, 0.05858182907104492], [0.014950132369995118, 0.01453385353088379, 0.014908742904663087, 0.014785146713256836, 0.036898326873779294, 0.014474248886108399, 0.014162158966064453, 0.014389848709106446, 0.014253711700439453, 0.0141998291015625], [0.05178756713867187, 0.05084757804870606, 0.04989681243896484, 0.051285743713378906, 0.058104753494262695, 0.04904179573059082, 0.050762176513671875, 0.05235953330993652, 0.049979782104492186, 0.0502892017364502], [0.26993894577026367, 0.2730558395385742, 0.2703345775604248, 0.2704909801483154, 0.26910743713378904, 0.27115631103515625, 0.27631211280822754, 0.27645096778869627, 0.26940484046936036, 0.27140445709228517], [0.014101982116699219, 0.010757732391357421, 0.01126708984375, 0.013196086883544922, 0.01403803825378418, 0.012529659271240234, 0.012142229080200195, 0.006466531753540039, 0.010718727111816406, 0.007674694061279297], [0.0, 0.0, 0.3199890613555908, 0.3312553882598877, 0.323503303527832, 0.0, 0.0, 0.0, 0.0, 0.32007403373718263]], [[0.0666682243347168, 0.07338919639587402, 0.07632131576538086, 0.09067263603210449, 0.07257122993469238, 0.06749882698059081, 0.06761507987976074, 0.055686330795288085, 0.04371709823608398, 0.04473028182983398], [0.036108970642089844, 0.0386141300201416, 0.030762624740600587, 0.04043416976928711, 0.030466508865356446, 0.029935789108276368, 0.036914825439453125, 0.030066394805908205, 0.018202972412109376, 0.020183563232421875], [0.0633923053741455, 0.06640920639038086, 0.06530528068542481, 0.0955817699432373, 0.07452855110168458, 0.06628060340881348, 0.06586737632751465, 0.05456395149230957, 0.05046577453613281, 0.049110031127929686], [0.3376442909240723, 0.2896257400512695, 0.42841830253601076, 0.35669994354248047, 0.39748053550720214, 0.32348809242248533, 0.2914699077606201, 0.2962312698364258, 0.2647902011871338, 0.26774048805236816], [0.05374932289123535, 0.04135317802429199, 0.06269135475158691, 0.06298789978027344, 0.08440103530883789, 0.04965300559997558, 0.04219636917114258, 0.037943553924560544, 0.029682397842407227, 0.027326250076293947], [0.0, 0.0, 0.513180923461914, 0.43335666656494143, 0.5784846782684326, 0.0, 0.0, 0.0, 0.0, 0.33415727615356444]], [[0.07514147758483887, 0.0878535270690918, 0.10704627037048339, 0.10917363166809083, 0.08583321571350097, 0.0755610466003418, 0.07284941673278808, 0.0720357894897461, 0.053358936309814455, 0.05313839912414551], [0.034060096740722655, 0.043688297271728516, 0.042316341400146486, 0.06385183334350586, 0.03367156982421875, 0.03131017684936523, 0.03526716232299805, 0.04358077049255371, 0.023493003845214844, 0.024674654006958008], [0.06921586990356446, 0.07385115623474121, 0.08273959159851074, 0.1375037670135498, 0.068455171585083, 0.06853184700012208, 0.07432546615600585, 0.06451025009155273, 0.05012364387512207, 0.051369762420654295], [0.3836031913757324, 0.29688377380371095, 0.5407166481018066, 0.4102648735046387, 0.5134212493896484, 0.36742725372314455, 0.2971485614776611, 0.2985891819000244, 0.2536956787109375, 0.2487048625946045], [0.08580565452575684, 0.06977200508117676, 0.1123277187347412, 0.10512862205505372, 0.1569838523864746, 0.08149771690368653, 0.07099347114562989, 0.059226036071777344, 0.044051170349121094, 0.04376120567321777], [0.0, 0.0, 0.675138282775879, 0.5073888301849365, 0.8273183345794678, 0.0, 0.0, 0.0, 0.0, 0.32674741744995117]], [[0.0899460792541504, 0.08708863258361817, 0.10325760841369629, 0.11017851829528809, 0.10220556259155274, 0.08339514732360839, 0.08006062507629394, 0.07128162384033203, 0.0442558765411377, 0.04973769187927246], [0.0452061653137207, 0.04368276596069336, 0.05067000389099121, 0.09050469398498535, 0.039022302627563475, 0.045556259155273435, 0.04921455383300781, 0.049354934692382814, 0.026219797134399415, 0.02636122703552246], [0.07888898849487305, 0.08528599739074708, 0.10361528396606445, 0.1861018180847168, 0.07797832489013672, 0.07324032783508301, 0.08814659118652343, 0.06787691116333008, 0.04908676147460937, 0.053301429748535155], [0.42118659019470217, 0.3035881996154785, 0.6549204349517822, 0.4790919303894043, 0.6145927906036377, 0.39229183197021483, 0.30560879707336425, 0.29523048400878904, 0.23759422302246094, 0.24312858581542968], [0.12188119888305664, 0.0942420482635498, 0.162644624710083, 0.14868154525756835, 0.23029656410217286, 0.10966382026672364, 0.0980903148651123, 0.08214764595031739, 0.05878238677978516, 0.05891413688659668], [0.0, 0.0, 0.8395445823669434, 0.5856976985931397, 1.0688426494598389, 0.0, 0.0, 0.0, 0.0, 0.3287353515625]], [[0.09312071800231933, 0.08390073776245117, 0.10117435455322266, 0.12370114326477051, 0.10001692771911622, 0.09199576377868653, 0.0852745532989502, 0.0608919620513916, 0.03696913719177246, 0.03896689414978027], [0.05168142318725586, 0.05400352478027344, 0.060841035842895505, 0.11551270484924317, 0.04279031753540039, 0.04550948143005371, 0.056067466735839844, 0.04894866943359375, 0.028273296356201173, 0.02948312759399414], [0.08794240951538086, 0.10149078369140625, 0.1211824893951416, 0.2299281597137451, 0.0835479736328125, 0.07994866371154785, 0.09668488502502441, 0.07297954559326172, 0.052662897109985354, 0.05831723213195801], [0.45431809425354003, 0.30241103172302247, 0.7681347370147705, 0.5502470970153809, 0.7359742164611817, 0.4250056266784668, 0.3053891658782959, 0.29245805740356445, 0.2300976276397705, 0.23762402534484864], [0.15606913566589356, 0.12371339797973632, 0.2126448631286621, 0.19647974967956544, 0.3095710754394531, 0.14475588798522948, 0.12351455688476562, 0.10532822608947753, 0.07228107452392578, 0.07661027908325195], [0.0, 0.0, 0.9913019657135009, 0.6807904720306397, 1.3240023136138916, 0.0, 0.0, 0.0, 0.0, 0.32975211143493655]],[[0.09522008895874023, 0.0869682788848877, 0.11372694969177247, 0.14478049278259278, 0.10004253387451172, 0.09127860069274903, 0.08696527481079101, 0.06498589515686035, 0.03729395866394043, 0.035839509963989255], [0.05414009094238281, 0.059225845336914065, 0.06765031814575195, 0.14814796447753906, 0.04120669364929199, 0.04828071594238281, 0.0599708080291748, 0.0498389720916748, 0.03265371322631836, 0.03269681930541992], [0.09637217521667481, 0.10983610153198242, 0.13556480407714844, 0.2745187759399414, 0.09030289649963379, 0.08770756721496582, 0.11233677864074706, 0.07385940551757812, 0.057764434814453126, 0.05976448059082031], [0.49551119804382326, 0.3065316200256348, 0.8850593566894531, 0.6060690402984619, 0.8437601566314697, 0.4603578090667725, 0.31006817817687987, 0.27832465171813964, 0.21950278282165528, 0.2225963592529297], [0.19505181312561035, 0.15493369102478027, 0.2606030464172363, 0.24370779991149902, 0.3858428955078125, 0.18002734184265137, 0.15206437110900878, 0.11709685325622558, 0.09305806159973144, 0.09276466369628907], [0.0, 0.0, 1.1473863124847412, 0.752536392211914, 1.593471622467041, 0.0, 0.0, 0.0, 0.0, 0.3235787391662598]], [[0.09978394508361817, 0.08983573913574219, 0.1033247470855713, 0.1596527099609375, 0.08793454170227051, 0.09219255447387695, 0.08118247985839844, 0.05426974296569824, 0.033373355865478516, 0.03291816711425781], [0.05818748474121094, 0.06671156883239746, 0.08298578262329101, 0.17053689956665039, 0.04756293296813965, 0.05432801246643067, 0.06793084144592285, 0.055143880844116214, 0.03789453506469727, 0.0359769344329834], [0.1036038875579834, 0.11978635787963868, 0.1557142734527588, 0.3185923099517822, 0.10050926208496094, 0.09749212265014648, 0.11935367584228515, 0.07856903076171876, 0.05566115379333496, 0.05862998962402344], [0.5454081535339356, 0.30403966903686525, 1.026514196395874, 0.6627579212188721, 0.9530817031860351, 0.5098099708557129, 0.3047636032104492, 0.2724014759063721, 0.209100341796875, 0.21367430686950684], [0.23213515281677247, 0.1737360954284668, 0.31534366607666015, 0.291700553894043, 0.4622384548187256, 0.21369609832763672, 0.1768187999725342, 0.13655033111572265, 0.10675854682922363, 0.10639033317565919], [0.0, 0.0, 1.3370393753051757, 0.8319333553314209, 1.843991994857788, 0.0, 0.0, 0.0, 0.0, 0.32586135864257815]], [[0.0992013931274414, 0.09885292053222657, 0.12186322212219239, 0.1802682399749756, 0.08403921127319336, 0.10446376800537109, 0.08421297073364258, 0.06125454902648926, 0.03226003646850586, 0.032344627380371097], [0.06452994346618653, 0.07683787345886231, 0.09237804412841796, 0.1954651355743408, 0.04850602149963379, 0.05989818572998047, 0.07955126762390137, 0.06257195472717285, 0.04685049057006836, 0.03862466812133789], [0.12005982398986817, 0.13315081596374512, 0.17388677597045898, 0.363816499710083, 0.10599694252014161, 0.10178694725036622, 0.1362706184387207, 0.08067870140075684, 0.05262141227722168, 0.06005668640136719], [0.5756800174713135, 0.3088557720184326, 1.1300031185150146, 0.7197423934936523, 1.0545545101165772, 0.5064438343048095, 0.30532355308532716, 0.2610656261444092, 0.19480104446411134, 0.19700016975402831], [0.2677281379699707, 0.2056549072265625, 0.36365280151367185, 0.3299575328826904, 0.5340674877166748, 0.24680714607238768, 0.20964818000793456, 0.15388450622558594, 0.12389960289001464, 0.11845169067382813], [0.0, 0.0, 1.4905237674713134, 0.9115723609924317, 2.0991950035095215, 0.0, 0.0, 0.0, 0.0, 0.31328554153442384]],[[0.10930538177490234, 0.09020051956176758, 0.1173440933227539, 0.19858055114746093, 0.08220715522766113, 0.09900984764099122, 0.08092694282531739, 0.06164641380310058, 0.031120967864990235, 0.03023371696472168], [0.07272696495056152, 0.0857170581817627, 0.11567659378051758, 0.22390575408935548, 0.04992566108703613, 0.06566758155822754, 0.08518438339233399, 0.06073980331420899, 0.04644336700439453, 0.044084787368774414], [0.12650551795959472, 0.15085058212280272, 0.18979978561401367, 0.40439715385437014, 0.1108525276184082, 0.11343870162963868, 0.14478774070739747, 0.0826873779296875, 0.05496830940246582, 0.0607820987701416], [0.6118515968322754, 0.3080845832824707, 1.2295204162597657, 0.7945764064788818, 1.1666566848754882, 0.5344517230987549, 0.3091181755065918, 0.250795316696167, 0.18498058319091798, 0.1874856472015381], [0.3063790798187256, 0.23294811248779296, 0.41423654556274414, 0.3731205463409424, 0.6146002292633057, 0.27869358062744143, 0.23386735916137696, 0.17275466918945312, 0.13544054031372071, 0.1369481086730957], [0.0, 0.0, 1.64697322845459, 0.9850786685943603, 2.3680049419403075, 0.0, 0.0, 0.0, 0.0, 0.3139492988586426]], [[0.08992037773132325, 0.0870887279510498, 0.11240148544311523, 0.20719776153564454, 0.0871610164642334, 0.09341721534729004, 0.08536572456359863, 0.053931474685668945, 0.0256350040435791, 0.025742244720458985], [0.08031167984008789, 0.09279265403747558, 0.11398630142211914, 0.23739442825317383, 0.05242643356323242, 0.07264389991760253, 0.09420804977416992, 0.06170339584350586, 0.059062623977661134, 0.04616284370422363], [0.13289813995361327, 0.16083965301513672, 0.20827908515930177, 0.43436522483825685, 0.11674485206604004, 0.12425661087036133, 0.16066570281982423, 0.08306407928466797, 0.06032915115356445, 0.06176924705505371], [0.6478484153747559, 0.30941224098205566, 1.3417673587799073, 0.8436922073364258, 1.2459097385406495, 0.5574754238128662, 0.3114713191986084, 0.23941993713378906, 0.17284126281738282, 0.1824028491973877], [0.3371166706085205, 0.2611554622650146, 0.4528497695922852, 0.41271419525146485, 0.6771835803985595, 0.30207152366638185, 0.25801963806152345, 0.18775744438171388, 0.14864139556884765, 0.1509007453918457], [0.0, 0.0, 1.7721914291381835, 1.0603645324707032, 2.5538047313690186, 0.0, 0.0, 0.0, 0.0, 0.31176395416259767]], [[0.0842595100402832, 0.07952895164489746, 0.11845507621765136, 0.2171076774597168, 0.08721637725830078, 0.0869643211364746, 0.08262314796447753, 0.06031017303466797, 0.01779828071594238, 0.018039417266845704], [0.09126882553100586, 0.10218114852905273, 0.12741618156433104, 0.25960283279418944, 0.05758280754089355, 0.0774846076965332, 0.10065302848815919, 0.06185016632080078, 0.04933032989501953, 0.05009946823120117], [0.14840755462646485, 0.17383947372436523, 0.23014965057373046, 0.47365684509277345, 0.12501726150512696, 0.12492761611938477, 0.17044987678527831, 0.08596582412719726, 0.05633301734924316, 0.0631331443786621], [0.6786178112030029, 0.30874929428100584, 1.4266149520874023, 0.8777366161346436, 1.3219713687896728, 0.5911278247833252, 0.3115503787994385, 0.23222432136535645, 0.16311864852905272, 0.1720282554626465], [0.3601382255554199, 0.2833382606506348, 0.4931812286376953, 0.4490837097167969, 0.7244167327880859, 0.3286140918731689, 0.2769941806793213, 0.20043635368347168, 0.1597367763519287, 0.16137871742248536], [0.0, 0.0, 1.9175050258636475, 1.117775297164917, 2.730383586883545, 0.0, 0.0, 0.0, 0.0, 0.30899796485900877]]]

newres = [([mean(l)] for l in sublist) for sublist in res]

#print(_plot_results_increasing_alternatives(range(0,301,30),res,querylist=[4],modellist=[1,1,1,1,1],increasing_alternatives=False))

print(_plot_results_increasing_alternatives(range(0,10001,1000),res,querylist=[1,2,3,4,5,6],modellist=[1,2,3,4,5,6,7,8,9,10],increasing_alternatives=False))


# X = range(len(res[0][0]))[:10]

# results = res[0]

# plt.plot(X, results[0][:10], color='r', label='1')
# plt.plot(X, results[1][:10], color='b', label='2')
# plt.plot(X, results[2][:10], color='g', label='3')
# plt.plot(X, results[3][:10], color='y', label='4')
# plt.plot(X, results[4][:10], color='m', label='5')
# plt.plot(X, results[5][:10], color='c', label='6')
# plt.plot(X, results[6][:10], color='k', label='7')
# plt.plot(X, results[7][:10], color='y', label='8')

# plt.xlabel("#Uncertainties per column")
# plt.ylabel("Time")
# plt.title(f"Query {4} with increasing numb uncertainties")

# plt.legend()
# plt.show()

# print([l[:10] for l in results])
